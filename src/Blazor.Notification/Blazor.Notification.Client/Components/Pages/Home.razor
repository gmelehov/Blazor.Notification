@page "/"
@using Blazor.Notification.Models
@using Blazor.Notification.Models.Dtos
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR
@using Blazor.Notification.Services
@rendermode InteractiveServer
@inject IJSRuntime jsRuntime
@implements IAsyncDisposable



<section>

  <header>
    <div class="main-title">
      <a href="https://localhost:7211" target="_blank" title="Запустить новый клиент">Blazor.Notification</a>
    </div>
    <div class="private-title">@PrivateChatText</div>
    <div class="common-title">Common chat</div>
  </header>


  <aside>
    <ClientsList @ref="ClientsListRef" ItemsList="@ServiceClients" SelectedClientId="@SelectedClientId" />
    <MessageEditor @ref="MessageEditorRef" BtnText="@BtnText" IsPrivate="@PublishToPrivate" />
  </aside>


  <main>
    <PrivateMessages @ref="PrivateMessagesRef" IsHidden="!PublishToPrivate" />
    <CommonMessages @ref="CommonMessagesRef" />
  </main>

</section>






@code {


  private IJSObjectReference? module;


  private DotNetObjectReference<Home>? homeRef;



  public ClientsList ClientsListRef { get; set; }


  public MessageEditor MessageEditorRef { get; set; }


  public PrivateMessages PrivateMessagesRef { get; set; }


  public CommonMessages CommonMessagesRef { get; set; }


  [Parameter]
  public string PrivateChatText { get; set; } = "Private chat";


  [Parameter]
  public string BtnText { get; set; } = "SEND TO COMMON CHAT";


  public string Cid { get; set; } = "";

  [Parameter]
  public List<ServiceClientDto> ServiceClients { get; set; } = [];


  public List<MessageDto> CommonMessagesList { get; set; } = [];


  public int SelectedClientId { get; set; }


  [Parameter]
  public bool PublishToPrivate { get; set; } = false;



  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/hubPage.js");
      homeRef = DotNetObjectReference.Create(this);
      await module.InvokeVoidAsync("HubPage.setDotNetHelper", "dotNetHelper", homeRef);
    }
  }




  [JSInvokable]
  public void UpdateClientsList(IEnumerable<ServiceClientDto> serviceClients)
  {
    ServiceClients = serviceClients.ToList();
    SelectedClientId = ServiceClients.FirstOrDefault(f => f.IsSelected)?.Id ?? 0;
    ClientsListRef.UpdateClients(ServiceClients);
    StateHasChanged();
  }


  [JSInvokable]
  public void AddMessages(IEnumerable<MessageDto> messages)
  {
    CommonMessagesRef.AddMessages(messages);
    StateHasChanged();
  }


  [JSInvokable]
  public void UpdateMessages(IEnumerable<MessageDto> messages)
  {
    CommonMessagesRef.UpdateMessages(messages);
    StateHasChanged();
  }



  [JSInvokable]
  public void AddPrivateMessages(IEnumerable<MessageDto> messages)
  {
    PrivateMessagesRef.AddMessages(messages);
    StateHasChanged();
  }


  [JSInvokable]
  public void UpdatePrivateMessages(IEnumerable<MessageDto> messages)
  {
    PrivateMessagesRef.UpdateMessages(messages);
    StateHasChanged();
  }


  [JSInvokable]
  public async Task UpdateSendBtnText(int clientId, string clientName, string clientCid)
  {
    this.PrivateChatText = clientId != 0 ? $"Private chat with {clientName}" : $"Private chat";
    this.BtnText = clientId != 0 && !string.IsNullOrWhiteSpace(clientName) ? $"SEND TO {clientName}" : "SEND TO COMMON CHAT";
    this.PublishToPrivate = clientId != 0;
    MessageEditorRef.SetBtnText(BtnText);
    MessageEditorRef.SetMessageRoute(clientId, clientCid);
    await InvokeAsync(StateHasChanged);
  }



  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    if (module is not null)
    {
      try
      {
        await module.DisposeAsync();
      }
      catch (JSDisconnectedException)
      {
      }
    }

    homeRef?.Dispose();
  }

}